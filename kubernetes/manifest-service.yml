apiVersion: v1
kind: Namespace
metadata:
  name: k8s-program

---

apiVersion: v1
kind: Service
metadata:
  name: post-service
  namespace: k8s-program
spec:
  type: NodePort
  selector:
    app: sample-app-service
  ports:
    - protocol: "TCP"
      nodePort: 30001
      port: 8083
      targetPort: 8083

---

apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: k8s-program
spec:
  type: NodePort
  selector:
    app: sample-app-service
  ports:
    - protocol: "TCP"
      nodePort: 30002
      port: 8084
      targetPort: 8084

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-user
  namespace: k8s-program
spec:
  selector:
    matchLabels:
      app: sample-app-service
  replicas: 2
  template:
    metadata:
      labels:
        app: sample-app-service
        owner: vladimirmagerov
    spec:
      containers:
        - name: user-container
          image: vladimirmagerov/user_service:1.0.0
          ports:
            - containerPort: 8090

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app-post
  namespace: k8s-program
spec:
  selector:
    matchLabels:
      app: sample-app-service
  replicas: 2
  template:
    metadata:
      labels:
        app: sample-app-service
        owner: vladimirmagerov
    spec:
      containers:
        - name: post-container
          image: vladimirmagerov/post_service:1.0.0
          ports:
            - containerPort: 8080

---

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: storage-user
  namespace: k8s-program
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: microk8s.io/hostpath

---

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: storage-post
  namespace: k8s-program
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: microk8s.io/hostpath

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-db
  namespace: k8s-program
spec:
  serviceName: "service-user-db"
  selector:
    matchLabels:
      app: sample-app-service
  template:
    metadata:
      labels:
        app: sample-app-service
    spec:
      containers:
        - name: postgres-user
          image: postgres:12
        - volumeMounts:
            - name: user-vol
            - mountPath: /var/lib/postgresql/data/user
  volumeClaimTemplates:
    - metadata:
        name: user-vol
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "storage-user"
        resources:
          requests:
            storage: 500M

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: post-db
  namespace: k8s-program
spec:
  serviceName: "service-post-db"
  selector:
    matchLabels:
      app: sample-app-service
  template:
    metadata:
      labels:
        app: sample-app-service
    spec:
      containers:
        - name: postgres-post
          image: postgres:12
        - volumeMounts:
            - name: post-vol
            - mountPath: /var/lib/postgresql/data/post
  volumeClaimTemplates:
    - metadata:
        name: post-vol
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "storage-post"
        resources:
          requests:
            storage: 500M
